var amqp = require('amqplib');var redis = require("redis").createClient({            host: "172.28.189.101",            port: 6379,            db: 8        });var WebSocket = require('faye-websocket'),    ws        = new WebSocket.Client('ws://172.28.184.100:9999/wxmsg'),     util = require('util');var connOptions = {  host: '172.28.189.101'  , port: 5672  , login: 'guest'  , password: 'guest'  , vhost: '/'}Date.prototype.format = function (fmt) {    var o = {        //月份         "M+": this.getMonth() + 1,              //日         "d+": this.getDate(),        //小时         "h+": this.getHours(),              //分         "m+": this.getMinutes(),                //秒         "s+": this.getSeconds(),                    //季度         "q+": Math.floor((this.getMonth() + 3) / 3),         //毫秒         "S": this.getMilliseconds()    };    if (/(y+)/.test(fmt)) {        fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));    }    for (var k in o) {        if (new RegExp("(" + k + ")").test(fmt)) {            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));        }    }    return fmt;};function extend(destination, source) {  for (var property in source) {      destination[property] = source[property];  }  return destination;}amqp.connect(connOptions).then(function(conn) {  process.once('SIGINT', function() { conn.close(); });  return conn.createChannel().then(function(ch) {    var ok = ch.assertQueue('task_queue', {durable: true});    ok = ok.then(function() { ch.prefetch(1); });    ok = ok.then(function() {      ch.consume('task_queue', doWork, {noAck: false});      console.log(" [*] Waiting for messages. To exit press CTRL+C");    });    return ok;    function doWork(msg) {      var body = msg.content.toString();      console.log(" [x] Received '%s'", body);      textOrImgSaveHandler(JSON.parse(body));      //var secs = body.split('.').length - 1;      //console.log(" [x] Task takes %d seconds", secs);      setTimeout(function() {        console.log(" [x] Done");        ch.ack(msg);      }, 10);    }  });}).catch(console.warn);// 保存user发送过来的信息function textOrImgSaveHandler(user){    var _date = new Date().format("yyyyMMdd hh:mm:ss SSS");    var awardArr = [2,38,58,166,288,388,488];//$.config.chatarray;    extend(user, {         date: _date    });        redis.keys("message:*", (err, reply)=>{      //判断聊天页面 第几条数据是否中奖      console.log(reply.length+1);      console.log(awardArr.indexOf((reply.length+1)));      if(awardArr.indexOf((reply.length+1))>=0){        console.log(111111);         extend(user, {              flag:1 // 0 ->表示未中奖的信息  1-> 表示中奖之后发送的人员页面           });        redis.keys("chataward:*", (err, result)=>{          redis.hmset("chataward:"+(result.length+1), user ,(err,data)=>{                      })        })        ws.send(JSON.stringify(user));      }    redis.hmset("message:"+(reply.length+1),user, function(err,reply){          console.log(reply);      });    });}